/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ICore {
  export type BetParamsStruct = {
    epoch: BigNumberish;
    number: BigNumberish;
    amount: BigNumberish;
    forecast: BigNumberish;
  };

  export type BetParamsStructOutput = [
    epoch: bigint,
    number: bigint,
    amount: bigint,
    forecast: bigint
  ] & { epoch: bigint; number: bigint; amount: bigint; forecast: bigint };

  export type ClaimParamsStruct = {
    epoch: BigNumberish;
    number: BigNumberish;
    amount: BigNumberish;
    forecast: BigNumberish;
    drawResultIndex: BigNumberish;
  };

  export type ClaimParamsStructOutput = [
    epoch: bigint,
    number: bigint,
    amount: bigint,
    forecast: bigint,
    drawResultIndex: bigint
  ] & {
    epoch: bigint;
    number: bigint;
    amount: bigint;
    forecast: bigint;
    drawResultIndex: bigint;
  };

  export type BetStruct = {
    epoch: BigNumberish;
    number: BigNumberish;
    amount: BigNumberish;
    forecast: BigNumberish;
    isClaimed: boolean;
  };

  export type BetStructOutput = [
    epoch: bigint,
    number: bigint,
    amount: bigint,
    forecast: bigint,
    isClaimed: boolean
  ] & {
    epoch: bigint;
    number: bigint;
    amount: bigint;
    forecast: bigint;
    isClaimed: boolean;
  };

  export type MultiplierStruct = {
    bigMultiplier: BigNumberish;
    smallMultiplier: BigNumberish;
  };

  export type MultiplierStructOutput = [
    bigMultiplier: bigint,
    smallMultiplier: bigint
  ] & { bigMultiplier: bigint; smallMultiplier: bigint };
}

export interface CoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "bet((uint256,uint256,uint256,uint8)[])"
      | "bet(address,(uint256,uint256,uint256,uint8)[])"
      | "claim"
      | "currentEpoch"
      | "currentEpochTimestamp"
      | "drawMultiplier"
      | "drawResults"
      | "gameUSD"
      | "gameUSDPool"
      | "getBets"
      | "helper"
      | "initialize"
      | "isBetClosed"
      | "maxBet"
      | "owner"
      | "paused"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setBetClose"
      | "setDrawMultipliers"
      | "setDrawResults"
      | "setGameUSDPoolContract"
      | "setHelperContract"
      | "setPause"
      | "setVRFCoordinator"
      | "totalBetsForNumber"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "userBet"
      | "userBetNumbers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BetCloseSet"
      | "Betted"
      | "Claimed"
      | "DrawMultipliersSet"
      | "DrawResultsSet"
      | "GameUSDPoolContractSet"
      | "HelperContractSet"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "Upgraded"
      | "VRFCoordinatorSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bet((uint256,uint256,uint256,uint8)[])",
    values: [ICore.BetParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bet(address,(uint256,uint256,uint256,uint8)[])",
    values: [AddressLike, ICore.BetParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, ICore.ClaimParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpochTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drawMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drawResults",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gameUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameUSDPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "helper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBetClosed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxBet", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBetClose",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDrawMultipliers",
    values: [ICore.MultiplierStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDrawResults",
    values: [BigNumberish[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameUSDPoolContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHelperContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setVRFCoordinator",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBetsForNumber",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userBet",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBetNumbers",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bet((uint256,uint256,uint256,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bet(address,(uint256,uint256,uint256,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpochTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameUSDPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "helper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBetClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBetClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDrawMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDrawResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameUSDPoolContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHelperContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVRFCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBetsForNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBetNumbers",
    data: BytesLike
  ): Result;
}

export namespace BetCloseSetEvent {
  export type InputTuple = [isBetClose: boolean];
  export type OutputTuple = [isBetClose: boolean];
  export interface OutputObject {
    isBetClose: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BettedEvent {
  export type InputTuple = [
    user: AddressLike,
    epoch: BigNumberish,
    number: BigNumberish,
    amount: BigNumberish,
    forecast: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    epoch: bigint,
    number: bigint,
    amount: bigint,
    forecast: bigint
  ];
  export interface OutputObject {
    user: string;
    epoch: bigint;
    number: bigint;
    amount: bigint;
    forecast: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    epoch: BigNumberish,
    number: BigNumberish,
    forecast: BigNumberish,
    amount: BigNumberish,
    drawResultIndex: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    epoch: bigint,
    number: bigint,
    forecast: bigint,
    amount: bigint,
    drawResultIndex: bigint
  ];
  export interface OutputObject {
    user: string;
    epoch: bigint;
    number: bigint;
    forecast: bigint;
    amount: bigint;
    drawResultIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DrawMultipliersSetEvent {
  export type InputTuple = [multiplier: ICore.MultiplierStruct[]];
  export type OutputTuple = [multiplier: ICore.MultiplierStructOutput[]];
  export interface OutputObject {
    multiplier: ICore.MultiplierStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DrawResultsSetEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    vrfCoordinator: AddressLike,
    proof: BytesLike
  ];
  export type OutputTuple = [
    epoch: bigint,
    vrfCoordinator: string,
    proof: string
  ];
  export interface OutputObject {
    epoch: bigint;
    vrfCoordinator: string;
    proof: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameUSDPoolContractSetEvent {
  export type InputTuple = [gameUSDPool: AddressLike];
  export type OutputTuple = [gameUSDPool: string];
  export interface OutputObject {
    gameUSDPool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HelperContractSetEvent {
  export type InputTuple = [helper: AddressLike];
  export type OutputTuple = [helper: string];
  export interface OutputObject {
    helper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VRFCoordinatorSetEvent {
  export type InputTuple = [vrfCoordinator: AddressLike, isValidated: boolean];
  export type OutputTuple = [vrfCoordinator: string, isValidated: boolean];
  export interface OutputObject {
    vrfCoordinator: string;
    isValidated: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Core extends BaseContract {
  connect(runner?: ContractRunner | null): Core;
  waitForDeployment(): Promise<this>;

  interface: CoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  "bet((uint256,uint256,uint256,uint8)[])": TypedContractMethod<
    [_bets: ICore.BetParamsStruct[]],
    [void],
    "nonpayable"
  >;

  "bet(address,(uint256,uint256,uint256,uint8)[])": TypedContractMethod<
    [user: AddressLike, _bets: ICore.BetParamsStruct[]],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<
    [user: AddressLike, claimParams: ICore.ClaimParamsStruct[]],
    [void],
    "nonpayable"
  >;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  currentEpochTimestamp: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  drawMultiplier: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { bigMultiplier: bigint; smallMultiplier: bigint }],
    "view"
  >;

  drawResults: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  gameUSD: TypedContractMethod<[], [string], "view">;

  gameUSDPool: TypedContractMethod<[], [string], "view">;

  getBets: TypedContractMethod<
    [user: AddressLike, epoch: BigNumberish],
    [ICore.BetStructOutput[]],
    "view"
  >;

  helper: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [admin: AddressLike, _gameUSDPool: AddressLike, _maxBet: BigNumberish],
    [void],
    "nonpayable"
  >;

  isBetClosed: TypedContractMethod<[], [boolean], "view">;

  maxBet: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBetClose: TypedContractMethod<
    [_isBetClosed: boolean],
    [void],
    "nonpayable"
  >;

  setDrawMultipliers: TypedContractMethod<
    [_drawMultipliers: ICore.MultiplierStruct[]],
    [void],
    "nonpayable"
  >;

  setDrawResults: TypedContractMethod<
    [numbers: BigNumberish[], maxBetAmount: BigNumberish, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  setGameUSDPoolContract: TypedContractMethod<
    [_gameUSDPool: AddressLike],
    [void],
    "nonpayable"
  >;

  setHelperContract: TypedContractMethod<
    [_helper: AddressLike],
    [void],
    "nonpayable"
  >;

  setPause: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  setVRFCoordinator: TypedContractMethod<
    [vrfCoordinators: AddressLike[], isValidated: boolean[]],
    [void],
    "nonpayable"
  >;

  totalBetsForNumber: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userBet: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        epoch: bigint;
        number: bigint;
        amount: bigint;
        forecast: bigint;
        isClaimed: boolean;
      }
    ],
    "view"
  >;

  userBetNumbers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bet((uint256,uint256,uint256,uint8)[])"
  ): TypedContractMethod<
    [_bets: ICore.BetParamsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bet(address,(uint256,uint256,uint256,uint8)[])"
  ): TypedContractMethod<
    [user: AddressLike, _bets: ICore.BetParamsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [user: AddressLike, claimParams: ICore.ClaimParamsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentEpochTimestamp"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "drawMultiplier"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { bigMultiplier: bigint; smallMultiplier: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "drawResults"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "gameUSD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameUSDPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBets"
  ): TypedContractMethod<
    [user: AddressLike, epoch: BigNumberish],
    [ICore.BetStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "helper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [admin: AddressLike, _gameUSDPool: AddressLike, _maxBet: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isBetClosed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxBet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBetClose"
  ): TypedContractMethod<[_isBetClosed: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDrawMultipliers"
  ): TypedContractMethod<
    [_drawMultipliers: ICore.MultiplierStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDrawResults"
  ): TypedContractMethod<
    [numbers: BigNumberish[], maxBetAmount: BigNumberish, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGameUSDPoolContract"
  ): TypedContractMethod<[_gameUSDPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHelperContract"
  ): TypedContractMethod<[_helper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVRFCoordinator"
  ): TypedContractMethod<
    [vrfCoordinators: AddressLike[], isValidated: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalBetsForNumber"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userBet"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        epoch: bigint;
        number: bigint;
        amount: bigint;
        forecast: bigint;
        isClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userBetNumbers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "BetCloseSet"
  ): TypedContractEvent<
    BetCloseSetEvent.InputTuple,
    BetCloseSetEvent.OutputTuple,
    BetCloseSetEvent.OutputObject
  >;
  getEvent(
    key: "Betted"
  ): TypedContractEvent<
    BettedEvent.InputTuple,
    BettedEvent.OutputTuple,
    BettedEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "DrawMultipliersSet"
  ): TypedContractEvent<
    DrawMultipliersSetEvent.InputTuple,
    DrawMultipliersSetEvent.OutputTuple,
    DrawMultipliersSetEvent.OutputObject
  >;
  getEvent(
    key: "DrawResultsSet"
  ): TypedContractEvent<
    DrawResultsSetEvent.InputTuple,
    DrawResultsSetEvent.OutputTuple,
    DrawResultsSetEvent.OutputObject
  >;
  getEvent(
    key: "GameUSDPoolContractSet"
  ): TypedContractEvent<
    GameUSDPoolContractSetEvent.InputTuple,
    GameUSDPoolContractSetEvent.OutputTuple,
    GameUSDPoolContractSetEvent.OutputObject
  >;
  getEvent(
    key: "HelperContractSet"
  ): TypedContractEvent<
    HelperContractSetEvent.InputTuple,
    HelperContractSetEvent.OutputTuple,
    HelperContractSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VRFCoordinatorSet"
  ): TypedContractEvent<
    VRFCoordinatorSetEvent.InputTuple,
    VRFCoordinatorSetEvent.OutputTuple,
    VRFCoordinatorSetEvent.OutputObject
  >;

  filters: {
    "BetCloseSet(bool)": TypedContractEvent<
      BetCloseSetEvent.InputTuple,
      BetCloseSetEvent.OutputTuple,
      BetCloseSetEvent.OutputObject
    >;
    BetCloseSet: TypedContractEvent<
      BetCloseSetEvent.InputTuple,
      BetCloseSetEvent.OutputTuple,
      BetCloseSetEvent.OutputObject
    >;

    "Betted(address,uint256,uint256,uint256,uint8)": TypedContractEvent<
      BettedEvent.InputTuple,
      BettedEvent.OutputTuple,
      BettedEvent.OutputObject
    >;
    Betted: TypedContractEvent<
      BettedEvent.InputTuple,
      BettedEvent.OutputTuple,
      BettedEvent.OutputObject
    >;

    "Claimed(address,uint256,uint256,uint8,uint256,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "DrawMultipliersSet(tuple[])": TypedContractEvent<
      DrawMultipliersSetEvent.InputTuple,
      DrawMultipliersSetEvent.OutputTuple,
      DrawMultipliersSetEvent.OutputObject
    >;
    DrawMultipliersSet: TypedContractEvent<
      DrawMultipliersSetEvent.InputTuple,
      DrawMultipliersSetEvent.OutputTuple,
      DrawMultipliersSetEvent.OutputObject
    >;

    "DrawResultsSet(uint256,address,bytes)": TypedContractEvent<
      DrawResultsSetEvent.InputTuple,
      DrawResultsSetEvent.OutputTuple,
      DrawResultsSetEvent.OutputObject
    >;
    DrawResultsSet: TypedContractEvent<
      DrawResultsSetEvent.InputTuple,
      DrawResultsSetEvent.OutputTuple,
      DrawResultsSetEvent.OutputObject
    >;

    "GameUSDPoolContractSet(address)": TypedContractEvent<
      GameUSDPoolContractSetEvent.InputTuple,
      GameUSDPoolContractSetEvent.OutputTuple,
      GameUSDPoolContractSetEvent.OutputObject
    >;
    GameUSDPoolContractSet: TypedContractEvent<
      GameUSDPoolContractSetEvent.InputTuple,
      GameUSDPoolContractSetEvent.OutputTuple,
      GameUSDPoolContractSetEvent.OutputObject
    >;

    "HelperContractSet(address)": TypedContractEvent<
      HelperContractSetEvent.InputTuple,
      HelperContractSetEvent.OutputTuple,
      HelperContractSetEvent.OutputObject
    >;
    HelperContractSet: TypedContractEvent<
      HelperContractSetEvent.InputTuple,
      HelperContractSetEvent.OutputTuple,
      HelperContractSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VRFCoordinatorSet(address,bool)": TypedContractEvent<
      VRFCoordinatorSetEvent.InputTuple,
      VRFCoordinatorSetEvent.OutputTuple,
      VRFCoordinatorSetEvent.OutputObject
    >;
    VRFCoordinatorSet: TypedContractEvent<
      VRFCoordinatorSetEvent.InputTuple,
      VRFCoordinatorSetEvent.OutputTuple,
      VRFCoordinatorSetEvent.OutputObject
    >;
  };
}
