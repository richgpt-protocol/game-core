/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FeeAndRewardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveWithdrawal"
      | "distributeReward"
      | "jackpotContract"
      | "owner"
      | "pendingWithdrawal"
      | "projectOwner"
      | "renounceOwnership"
      | "requestWithdrawal"
      | "setJackpotContract"
      | "setProjectOwner"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "JackpotContractSet"
      | "OwnershipTransferred"
      | "ProjectOwnerSet"
      | "RewardDistributed"
      | "WithdrawalApproved"
      | "WithdrawalRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveWithdrawal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReward",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jackpotContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "projectOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setJackpotContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jackpotContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJackpotContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace JackpotContractSetEvent {
  export type InputTuple = [jackpotContract: AddressLike];
  export type OutputTuple = [jackpotContract: string];
  export interface OutputObject {
    jackpotContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectOwnerSetEvent {
  export type InputTuple = [projectOwner: AddressLike];
  export type OutputTuple = [projectOwner: string];
  export interface OutputObject {
    projectOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDistributedEvent {
  export type InputTuple = [
    to: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [to: string, token: string, amount: bigint];
  export interface OutputObject {
    to: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalApprovedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalRequestedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeAndReward extends BaseContract {
  connect(runner?: ContractRunner | null): FeeAndReward;
  waitForDeployment(): Promise<this>;

  interface: FeeAndRewardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveWithdrawal: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributeReward: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  jackpotContract: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingWithdrawal: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  projectOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestWithdrawal: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setJackpotContract: TypedContractMethod<
    [_jackpotContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setProjectOwner: TypedContractMethod<
    [_projectOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveWithdrawal"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeReward"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "jackpotContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingWithdrawal"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "projectOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWithdrawal"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setJackpotContract"
  ): TypedContractMethod<[_jackpotContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProjectOwner"
  ): TypedContractMethod<[_projectOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "JackpotContractSet"
  ): TypedContractEvent<
    JackpotContractSetEvent.InputTuple,
    JackpotContractSetEvent.OutputTuple,
    JackpotContractSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectOwnerSet"
  ): TypedContractEvent<
    ProjectOwnerSetEvent.InputTuple,
    ProjectOwnerSetEvent.OutputTuple,
    ProjectOwnerSetEvent.OutputObject
  >;
  getEvent(
    key: "RewardDistributed"
  ): TypedContractEvent<
    RewardDistributedEvent.InputTuple,
    RewardDistributedEvent.OutputTuple,
    RewardDistributedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalApproved"
  ): TypedContractEvent<
    WithdrawalApprovedEvent.InputTuple,
    WithdrawalApprovedEvent.OutputTuple,
    WithdrawalApprovedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalRequested"
  ): TypedContractEvent<
    WithdrawalRequestedEvent.InputTuple,
    WithdrawalRequestedEvent.OutputTuple,
    WithdrawalRequestedEvent.OutputObject
  >;

  filters: {
    "JackpotContractSet(address)": TypedContractEvent<
      JackpotContractSetEvent.InputTuple,
      JackpotContractSetEvent.OutputTuple,
      JackpotContractSetEvent.OutputObject
    >;
    JackpotContractSet: TypedContractEvent<
      JackpotContractSetEvent.InputTuple,
      JackpotContractSetEvent.OutputTuple,
      JackpotContractSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectOwnerSet(address)": TypedContractEvent<
      ProjectOwnerSetEvent.InputTuple,
      ProjectOwnerSetEvent.OutputTuple,
      ProjectOwnerSetEvent.OutputObject
    >;
    ProjectOwnerSet: TypedContractEvent<
      ProjectOwnerSetEvent.InputTuple,
      ProjectOwnerSetEvent.OutputTuple,
      ProjectOwnerSetEvent.OutputObject
    >;

    "RewardDistributed(address,address,uint256)": TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;
    RewardDistributed: TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;

    "WithdrawalApproved(address,uint256)": TypedContractEvent<
      WithdrawalApprovedEvent.InputTuple,
      WithdrawalApprovedEvent.OutputTuple,
      WithdrawalApprovedEvent.OutputObject
    >;
    WithdrawalApproved: TypedContractEvent<
      WithdrawalApprovedEvent.InputTuple,
      WithdrawalApprovedEvent.OutputTuple,
      WithdrawalApprovedEvent.OutputObject
    >;

    "WithdrawalRequested(address,uint256)": TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
    WithdrawalRequested: TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
  };
}
