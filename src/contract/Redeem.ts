/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RedeemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "gameUSD"
      | "gameUSDPool"
      | "initialize"
      | "isWhitelisted"
      | "owner"
      | "pause"
      | "paused"
      | "payoutPool"
      | "proxiableUUID"
      | "redeem"
      | "redeemable"
      | "renounceOwnership"
      | "setGameUSDPoolContract"
      | "setMultipleWhitelist"
      | "setPayoutPoolContract"
      | "setRedeemable"
      | "setWhitelist"
      | "transferOwnership"
      | "unPause"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameUSDPoolContractSet"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "PayoutPoolContractSet"
      | "RedeemableSet"
      | "Redeemed"
      | "Unpaused"
      | "Upgraded"
      | "WhitelistSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameUSDPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGameUSDPoolContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultipleWhitelist",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayoutPoolContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemable",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameUSDPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameUSDPoolContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultipleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPayoutPoolContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace GameUSDPoolContractSetEvent {
  export type InputTuple = [gameUSDPool: AddressLike];
  export type OutputTuple = [gameUSDPool: string];
  export interface OutputObject {
    gameUSDPool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayoutPoolContractSetEvent {
  export type InputTuple = [payoutPool: AddressLike];
  export type OutputTuple = [payoutPool: string];
  export interface OutputObject {
    payoutPool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemableSetEvent {
  export type InputTuple = [
    wallet: AddressLike,
    amount: BigNumberish,
    isIncrease: boolean
  ];
  export type OutputTuple = [
    wallet: string,
    amount: bigint,
    isIncrease: boolean
  ];
  export interface OutputObject {
    wallet: string;
    amount: bigint;
    isIncrease: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemedEvent {
  export type InputTuple = [
    user: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    payoutNonce: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    to: string,
    amount: bigint,
    payoutNonce: bigint
  ];
  export interface OutputObject {
    user: string;
    to: string;
    amount: bigint;
    payoutNonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistSetEvent {
  export type InputTuple = [whitelist: AddressLike, status: boolean];
  export type OutputTuple = [whitelist: string, status: boolean];
  export interface OutputObject {
    whitelist: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Redeem extends BaseContract {
  connect(runner?: ContractRunner | null): Redeem;
  waitForDeployment(): Promise<this>;

  interface: RedeemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  gameUSD: TypedContractMethod<[], [string], "view">;

  gameUSDPool: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;

  isWhitelisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  payoutPool: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  redeem: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  redeemable: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setGameUSDPoolContract: TypedContractMethod<
    [_gameUSDPool: AddressLike],
    [void],
    "nonpayable"
  >;

  setMultipleWhitelist: TypedContractMethod<
    [addr: AddressLike[], status: boolean[]],
    [void],
    "nonpayable"
  >;

  setPayoutPoolContract: TypedContractMethod<
    [_payoutPool: AddressLike],
    [void],
    "nonpayable"
  >;

  setRedeemable: TypedContractMethod<
    [wallet: AddressLike, amount: BigNumberish, isIncrease: boolean],
    [void],
    "nonpayable"
  >;

  setWhitelist: TypedContractMethod<
    [whitelist: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unPause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameUSD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameUSDPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "payoutPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemable"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGameUSDPoolContract"
  ): TypedContractMethod<[_gameUSDPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMultipleWhitelist"
  ): TypedContractMethod<
    [addr: AddressLike[], status: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPayoutPoolContract"
  ): TypedContractMethod<[_payoutPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRedeemable"
  ): TypedContractMethod<
    [wallet: AddressLike, amount: BigNumberish, isIncrease: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<
    [whitelist: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "GameUSDPoolContractSet"
  ): TypedContractEvent<
    GameUSDPoolContractSetEvent.InputTuple,
    GameUSDPoolContractSetEvent.OutputTuple,
    GameUSDPoolContractSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PayoutPoolContractSet"
  ): TypedContractEvent<
    PayoutPoolContractSetEvent.InputTuple,
    PayoutPoolContractSetEvent.OutputTuple,
    PayoutPoolContractSetEvent.OutputObject
  >;
  getEvent(
    key: "RedeemableSet"
  ): TypedContractEvent<
    RedeemableSetEvent.InputTuple,
    RedeemableSetEvent.OutputTuple,
    RedeemableSetEvent.OutputObject
  >;
  getEvent(
    key: "Redeemed"
  ): TypedContractEvent<
    RedeemedEvent.InputTuple,
    RedeemedEvent.OutputTuple,
    RedeemedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistSet"
  ): TypedContractEvent<
    WhitelistSetEvent.InputTuple,
    WhitelistSetEvent.OutputTuple,
    WhitelistSetEvent.OutputObject
  >;

  filters: {
    "GameUSDPoolContractSet(address)": TypedContractEvent<
      GameUSDPoolContractSetEvent.InputTuple,
      GameUSDPoolContractSetEvent.OutputTuple,
      GameUSDPoolContractSetEvent.OutputObject
    >;
    GameUSDPoolContractSet: TypedContractEvent<
      GameUSDPoolContractSetEvent.InputTuple,
      GameUSDPoolContractSetEvent.OutputTuple,
      GameUSDPoolContractSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PayoutPoolContractSet(address)": TypedContractEvent<
      PayoutPoolContractSetEvent.InputTuple,
      PayoutPoolContractSetEvent.OutputTuple,
      PayoutPoolContractSetEvent.OutputObject
    >;
    PayoutPoolContractSet: TypedContractEvent<
      PayoutPoolContractSetEvent.InputTuple,
      PayoutPoolContractSetEvent.OutputTuple,
      PayoutPoolContractSetEvent.OutputObject
    >;

    "RedeemableSet(address,uint256,bool)": TypedContractEvent<
      RedeemableSetEvent.InputTuple,
      RedeemableSetEvent.OutputTuple,
      RedeemableSetEvent.OutputObject
    >;
    RedeemableSet: TypedContractEvent<
      RedeemableSetEvent.InputTuple,
      RedeemableSetEvent.OutputTuple,
      RedeemableSetEvent.OutputObject
    >;

    "Redeemed(address,address,uint256,uint256)": TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;
    Redeemed: TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WhitelistSet(address,bool)": TypedContractEvent<
      WhitelistSetEvent.InputTuple,
      WhitelistSetEvent.OutputTuple,
      WhitelistSetEvent.OutputObject
    >;
    WhitelistSet: TypedContractEvent<
      WhitelistSetEvent.InputTuple,
      WhitelistSetEvent.OutputTuple,
      WhitelistSetEvent.OutputObject
    >;
  };
}
