/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ReferralInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "initialize"
      | "isWhitelisted"
      | "owner"
      | "proxiableUUID"
      | "redeem"
      | "referralFeePerc"
      | "referrer"
      | "renounceOwnership"
      | "setMultipleWhitelist"
      | "setRedeemContract"
      | "setReferralFee"
      | "setReferralFeePerc"
      | "setReferrer"
      | "setWhitelist"
      | "transferOwnership"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnershipTransferred"
      | "RedeemContractSet"
      | "ReferralFeePercSet"
      | "ReferralFeeSet"
      | "ReferrerSet"
      | "Upgraded"
      | "WhitelistSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralFeePerc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referrer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMultipleWhitelist",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralFeePerc",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrer",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralFeePerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultipleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralFeePerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemContractSetEvent {
  export type InputTuple = [redeemContract: AddressLike];
  export type OutputTuple = [redeemContract: string];
  export interface OutputObject {
    redeemContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralFeePercSetEvent {
  export type InputTuple = [referralFeePerc: BigNumberish];
  export type OutputTuple = [referralFeePerc: bigint];
  export interface OutputObject {
    referralFeePerc: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralFeeSetEvent {
  export type InputTuple = [
    referrer: AddressLike,
    depositAmount: BigNumberish,
    referralFee: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    depositAmount: bigint,
    referralFee: bigint
  ];
  export interface OutputObject {
    referrer: string;
    depositAmount: bigint;
    referralFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferrerSetEvent {
  export type InputTuple = [user: AddressLike, referrer: AddressLike];
  export type OutputTuple = [user: string, referrer: string];
  export interface OutputObject {
    user: string;
    referrer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistSetEvent {
  export type InputTuple = [addr: AddressLike, status: boolean];
  export type OutputTuple = [addr: string, status: boolean];
  export interface OutputObject {
    addr: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Referral extends BaseContract {
  connect(runner?: ContractRunner | null): Referral;
  waitForDeployment(): Promise<this>;

  interface: ReferralInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [owner: AddressLike, _referralFeePerc: BigNumberish],
    [void],
    "nonpayable"
  >;

  isWhitelisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  redeem: TypedContractMethod<[], [string], "view">;

  referralFeePerc: TypedContractMethod<[], [bigint], "view">;

  referrer: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setMultipleWhitelist: TypedContractMethod<
    [whitelists: AddressLike[], status: boolean[]],
    [void],
    "nonpayable"
  >;

  setRedeemContract: TypedContractMethod<
    [_redeem: AddressLike],
    [void],
    "nonpayable"
  >;

  setReferralFee: TypedContractMethod<
    [_referrer: AddressLike, depositAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setReferralFeePerc: TypedContractMethod<
    [_referralFeePerc: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReferrer: TypedContractMethod<
    [_user: AddressLike, _referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  setWhitelist: TypedContractMethod<
    [whitelist: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [owner: AddressLike, _referralFeePerc: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "referralFeePerc"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "referrer"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMultipleWhitelist"
  ): TypedContractMethod<
    [whitelists: AddressLike[], status: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRedeemContract"
  ): TypedContractMethod<[_redeem: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReferralFee"
  ): TypedContractMethod<
    [_referrer: AddressLike, depositAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReferralFeePerc"
  ): TypedContractMethod<
    [_referralFeePerc: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReferrer"
  ): TypedContractMethod<
    [_user: AddressLike, _referrer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<
    [whitelist: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RedeemContractSet"
  ): TypedContractEvent<
    RedeemContractSetEvent.InputTuple,
    RedeemContractSetEvent.OutputTuple,
    RedeemContractSetEvent.OutputObject
  >;
  getEvent(
    key: "ReferralFeePercSet"
  ): TypedContractEvent<
    ReferralFeePercSetEvent.InputTuple,
    ReferralFeePercSetEvent.OutputTuple,
    ReferralFeePercSetEvent.OutputObject
  >;
  getEvent(
    key: "ReferralFeeSet"
  ): TypedContractEvent<
    ReferralFeeSetEvent.InputTuple,
    ReferralFeeSetEvent.OutputTuple,
    ReferralFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "ReferrerSet"
  ): TypedContractEvent<
    ReferrerSetEvent.InputTuple,
    ReferrerSetEvent.OutputTuple,
    ReferrerSetEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistSet"
  ): TypedContractEvent<
    WhitelistSetEvent.InputTuple,
    WhitelistSetEvent.OutputTuple,
    WhitelistSetEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RedeemContractSet(address)": TypedContractEvent<
      RedeemContractSetEvent.InputTuple,
      RedeemContractSetEvent.OutputTuple,
      RedeemContractSetEvent.OutputObject
    >;
    RedeemContractSet: TypedContractEvent<
      RedeemContractSetEvent.InputTuple,
      RedeemContractSetEvent.OutputTuple,
      RedeemContractSetEvent.OutputObject
    >;

    "ReferralFeePercSet(uint256)": TypedContractEvent<
      ReferralFeePercSetEvent.InputTuple,
      ReferralFeePercSetEvent.OutputTuple,
      ReferralFeePercSetEvent.OutputObject
    >;
    ReferralFeePercSet: TypedContractEvent<
      ReferralFeePercSetEvent.InputTuple,
      ReferralFeePercSetEvent.OutputTuple,
      ReferralFeePercSetEvent.OutputObject
    >;

    "ReferralFeeSet(address,uint256,uint256)": TypedContractEvent<
      ReferralFeeSetEvent.InputTuple,
      ReferralFeeSetEvent.OutputTuple,
      ReferralFeeSetEvent.OutputObject
    >;
    ReferralFeeSet: TypedContractEvent<
      ReferralFeeSetEvent.InputTuple,
      ReferralFeeSetEvent.OutputTuple,
      ReferralFeeSetEvent.OutputObject
    >;

    "ReferrerSet(address,address)": TypedContractEvent<
      ReferrerSetEvent.InputTuple,
      ReferrerSetEvent.OutputTuple,
      ReferrerSetEvent.OutputObject
    >;
    ReferrerSet: TypedContractEvent<
      ReferrerSetEvent.InputTuple,
      ReferrerSetEvent.OutputTuple,
      ReferrerSetEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WhitelistSet(address,bool)": TypedContractEvent<
      WhitelistSetEvent.InputTuple,
      WhitelistSetEvent.OutputTuple,
      WhitelistSetEvent.OutputObject
    >;
    WhitelistSet: TypedContractEvent<
      WhitelistSetEvent.InputTuple,
      WhitelistSetEvent.OutputTuple,
      WhitelistSetEvent.OutputObject
    >;
  };
}
